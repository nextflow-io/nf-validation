{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nf-validation","text":"<p>A Nextflow plugin to work with validation of pipeline parameters and sample sheets.</p> <p><code>nf-validation</code> has now been renamed to <code>nf-schema</code>.</p> <p><code>nf-validation</code> has now been renamed to <code>nf-schema</code>. The <code>nf-validation</code> plugin will not receive any future updates. Please update your pipelines to use <code>nf-schema</code> instead. This change was necessary to prevent older versions of <code>nf-core</code> pipelines from with unpinned plugin references from breaking when updating to the latest version of <code>nf-validation</code>. Please pin the version of <code>nf-schema</code> in your pipeline's <code>nextflow.config</code> file: <pre><code>plugins { id 'nf-schema@2.0.0' }\n</code></pre></p>"},{"location":"#introduction","title":"Introduction","text":"<p>This Nextflow plugin provides a number of functions that can be included into a Nextflow pipeline script to work with parameter and sample sheet schema. Using these functions you can:</p> <ul> <li>\ud83d\udcd6 Print usage instructions to the terminal (for use with <code>--help</code>)</li> <li>\u270d\ufe0f Print log output showing parameters with non-default values</li> <li>\u2705 Validate supplied parameters against the pipeline schema</li> <li>\ud83d\udccb Validate the contents of supplied sample sheet files</li> <li>\ud83d\udee0\ufe0f Create a Nextflow channel with a parsed sample sheet</li> </ul> <p>Supported sample sheet formats are CSV, TSV and YAML (simple).</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Declare the plugin in your Nextflow pipeline configuration file:</p> nextflow.config<pre><code>plugins {\n  id 'nf-validation'\n}\n</code></pre> <p>This is all that is needed - Nextflow will automatically fetch the plugin code at run time.</p> <p>[!NOTE] The snippet above will always try to install the latest version, good to make sure that the latest bug fixes are included! However, this can cause difficulties if running offline. You can pin a specific release using the syntax <code>nf-validation@0.3.2</code></p> <p>You can now include the plugin helper functions into your Nextflow pipeline:</p> main.nf<pre><code>include { validateParameters; paramsHelp; paramsSummaryLog; fromSamplesheet } from 'plugin/nf-validation'\n\n// Print help message, supply typical command line usage for the pipeline\nif (params.help) {\n   log.info paramsHelp(\"nextflow run my_pipeline --input input_file.csv\")\n   exit 0\n}\n\n// Validate input parameters\nvalidateParameters()\n\n// Print summary of supplied parameters\nlog.info paramsSummaryLog(workflow)\n\n// Create a new channel of metadata from a sample sheet\n// NB: `input` corresponds to `params.input` and associated sample sheet schema\nch_input = Channel.fromSamplesheet(\"input\")\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Java 11 or later</li> <li>https://github.com/everit-org/json-schema</li> </ul>"},{"location":"#slack-channel","title":"Slack channel","text":"<p>There is a dedicated nf-validation Slack channel in the Nextflow Slack workspace.</p>"},{"location":"#credits","title":"Credits","text":"<p>This plugin was written based on code initially written within the nf-core community, as part of the nf-core pipeline template.</p> <p>We would like to thank the key contributors who include (but are not limited to):</p> <ul> <li>J\u00falia Mir Pedrol (@mirpedrol)</li> <li>Nicolas Vannieuwkerke (@nvnieuwk)</li> <li>Kevin Menden (@KevinMenden)</li> <li>Phil Ewels (@ewels)</li> </ul>"},{"location":"background/","title":"Background","text":"<p>The Nextflow workflow manager is a powerful tool for scientific workflows. In order for end users to launch a given workflow with different input data and varying settings, pipelines are developed using a special variable type called parameters (<code>params</code>). Defaults are hardcoded into scripts and config files but can be overwritten by user config files and command-line flags (see the Nextflow docs).</p> <p>In addition to config params, a common best-practice for pipelines is to use a \"sample sheet\" file containing required input information. For example: a sample identifier, filenames and other sample-level metadata.</p> <p>Nextflow itself does not provide functionality to validate config parameters or parsed sample sheets. To bridge this gap, we developed code within the nf-core community to allow pipelines to work with a standard <code>nextflow_schema.json</code> file, written using the JSON Schema format. The file allows strict typing of parameter variables and inclusion of validation rules.</p> <p>The nf-validation plugin moves this code out of the nf-core template into a stand-alone package, to make it easier to use for the wider Nextflow community. It also incorporates a number of new features, such as native Groovy sample sheet validation.</p>"},{"location":"contributing/setup/","title":"Getting started with plugin development","text":""},{"location":"contributing/setup/#compiling","title":"Compiling","text":"<p>To compile and run the tests use the following command:</p> <pre><code>./gradlew check\n</code></pre>"},{"location":"contributing/setup/#launch-it-with-nextflow","title":"Launch it with Nextflow","text":"<p>To test with Nextflow for development purpose:</p> <p>Clone the Nextflow repo into a sibling directory</p> <pre><code>cd .. &amp;&amp; git clone https://github.com/nextflow-io/nextflow\ncd nextflow &amp;&amp; ./gradlew exportClasspath\n</code></pre> <p>Append to the <code>settings.gradle</code> in this project the following line:</p> <pre><code>includeBuild('../nextflow')\n</code></pre> <p>Compile the plugin code</p> <pre><code>./gradlew compileGroovy\n</code></pre> <p>Run nextflow with this command:</p> <pre><code>./launch.sh run -plugins nf-validation &lt;script/pipeline name&gt; [pipeline params]\n</code></pre>"},{"location":"contributing/setup/#change-and-preview-the-docs","title":"Change and preview the docs","text":"<p>The docs are generated using Material for MkDocs. You can install the required packages as follows:</p> <pre><code>pip install mkdocs-material pymdown-extensions pillow cairosvg\n</code></pre> <p>To change the docs, edit the files in the docs/ folder and run the following command to generate the docs:</p> <pre><code>mkdocs serve\n</code></pre> <p>To preview the docs, open the URL provided by mkdocs in your browser.</p>"},{"location":"nextflow_schema/","title":"Nextflow schema for parameters","text":"<p>The functionality of the nf-validation plugin centres on a pipeline schema file. By convention, this file is stored in the workflow root directory and called <code>nextflow_schema.json</code>.</p>"},{"location":"nextflow_schema/#what-it-does","title":"What it does","text":"<p>The schema file provides a place to describe the pipeline configuration. It is based on the JSON Schema format standard.</p> <p>In brief, it includes information for each parameter about:</p> <ul> <li>Name (the <code>params.name</code>)</li> <li>Description and help texts</li> <li>Variable type (string, integer, boolean, etc)</li> <li>Validation rules (string regexes, numeric min / max, enum, etc)</li> </ul> <p>..and more. See the full specification for details.</p> <p>Warning</p> <p>Although it's based on JSON Schema - there are some differences. We use a few non-standard keys and impose one or two limitations that are not present in the standard specification.</p> <p>Tip</p> <p>It's highly recommended that you don't try to write the schema JSON file manually. Instead, use the provided tooling - see Creating schema for details.</p>"},{"location":"nextflow_schema/#how-its-used","title":"How it's used","text":"<p>The <code>nextflow_schema.json</code> file and format have been in use for a few years now and are widely used in the community. Some specific examples of usage are:</p> <ul> <li>Validation &amp; help texts within pipelines (this plugin)</li> <li>Generation of documentation pages (nf-core pipeline pages)</li> <li>Generation of pipeline launch user interfaces (nf-core launch, Nextflow Tower and more)</li> </ul>"},{"location":"nextflow_schema/#looking-to-the-future","title":"Looking to the future","text":"<p>The pipeline schema has been developed to provide additional functionality not present in core Nextflow. It's our hope that at some point this functionality will be added to core Nextflow, making schema files redundant.</p> <p>See the GitHub issue Evolution of Nextflow configuration file (<code>nextflow-io/nextflow#2723</code>) on the Nextflow repo for discussion about potential new configuration file formats, which could potentially include the kind of information that we have within schema.</p>"},{"location":"nextflow_schema/create_schema/","title":"Creating schema files","text":"<p>Warning</p> <p>It's highly recommended that you don't try to write the schema JSON file manually!</p> <p>The schema files can get large and complex and are difficult to debug. Don't be tempted to open in your code editor - instead use the provided tools!</p>"},{"location":"nextflow_schema/create_schema/#requirements","title":"Requirements","text":"<p>To work with Nextflow schema files, you need the <code>nf-core</code> command-line tools package. You can find full installation instructions in the nf-core documentation, but in brief, you install as with any other Python package:</p> <pre><code>pip install nf-core\n# -- OR -- #\nconda install nf-core # (1)!\n</code></pre> <ol> <li> Note: Needs bioconda channels to be configured!     See the Bioconda usage docs.</li> </ol> <p>Info</p> <p>Although these tools are currently within the nf-core tooling ecosystem, they should work with any Nextflow pipeline: you don't have to be using the nf-core template for this.</p> <p>Note</p> <p>We aim to extract this functionality into stand-alone tools at a future date, as we have done with the pipeline validation code in this plugin.</p>"},{"location":"nextflow_schema/create_schema/#build-a-pipeline-schema","title":"Build a pipeline schema","text":"<p>Once you have nf-core/tools installed and have written your pipeline configuration, go to the pipeline root and run the following:</p> <pre><code>nf-core schema build\n</code></pre> <p>The tool will run the <code>nextflow config</code> command to extract your pipeline's configuration and compare the output to your <code>nextflow_schema.json</code> file (if it exists). It will prompt you to update the schema file with any changes, then it will ask if you wish to edit the schema using the web interface.</p> <p>This web interface is where you should add detail to your schema, customising the various fields for each parameter.</p> <p>Tip</p> <p>You can run the <code>nf-core schema build</code> command again and again, as many times as you like. It's designed both for initial creation but also future updates of the schema file.</p> <p>It's a good idea to \"save little and often\" by clicking <code>Finished</code> and saving your work locally, then running the command again to continue.</p>"},{"location":"nextflow_schema/create_schema/#build-a-sample-sheet-schema","title":"Build a sample sheet schema","text":"<p>Danger</p> <p>There is currently no tooling to help you write sample sheet schema </p> <p>Watch this space..</p>"},{"location":"nextflow_schema/nextflow_schema_examples/","title":"Example Nextflow schema","text":"<p>You can see an example JSON Schema for a Nextflow pipeline <code>nextflow_schema.json</code> file below.</p> <p>This file was generated from the nf-core pipeline template, using <code>nf-core create</code>. It is used as a test fixture in the nf-validation package here.</p> <p>Note</p> <p>More examples can be found in the plugin <code>testResources</code> directory.</p> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                },\n                \"email\": {\n                    \"type\": \"string\",\n                    \"description\": \"Email address for completion summary.\",\n                    \"fa_icon\": \"fas fa-envelope\",\n                    \"help_text\": \"Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.\",\n                    \"pattern\": \"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\"\n                },\n                \"multiqc_title\": {\n                    \"type\": \"string\",\n                    \"description\": \"MultiQC report title. Printed as page header, used for filename if not otherwise specified.\",\n                    \"fa_icon\": \"fas fa-file-signature\"\n                }\n            }\n        },\n        \"reference_genome_options\": {\n            \"title\": \"Reference genome options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-dna\",\n            \"description\": \"Reference genome related files and options required for the workflow.\",\n            \"properties\": {\n                \"genome\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of iGenomes reference.\",\n                    \"fa_icon\": \"fas fa-book\",\n                    \"help_text\": \"If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \\n\\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details.\"\n                },\n                \"fasta\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/plain\",\n                    \"pattern\": \"^\\\\S+\\\\.fn?a(sta)?(\\\\.gz)?$\",\n                    \"description\": \"Path to FASTA genome file.\",\n                    \"help_text\": \"This parameter is *mandatory* if `--genome` is not specified. If you don't have a BWA index available this will be generated for you automatically. Combine with `--save_reference` to save BWA index for future runs.\",\n                    \"fa_icon\": \"far fa-file-code\"\n                },\n                \"igenomes_base\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"Directory / URL base for iGenomes references.\",\n                    \"default\": \"s3://ngi-igenomes/igenomes\",\n                    \"fa_icon\": \"fas fa-cloud-download-alt\",\n                    \"hidden\": true\n                },\n                \"igenomes_ignore\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Do not load the iGenomes reference config.\",\n                    \"fa_icon\": \"fas fa-ban\",\n                    \"hidden\": true,\n                    \"help_text\": \"Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`.\"\n                }\n            }\n        },\n        \"institutional_config_options\": {\n            \"title\": \"Institutional config options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-university\",\n            \"description\": \"Parameters used to describe centralised config profiles. These should not be edited.\",\n            \"help_text\": \"The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.\",\n            \"properties\": {\n                \"custom_config_version\": {\n                    \"type\": \"string\",\n                    \"description\": \"Git commit id for Institutional configs.\",\n                    \"default\": \"master\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-users-cog\"\n                },\n                \"custom_config_base\": {\n                    \"type\": \"string\",\n                    \"description\": \"Base directory for Institutional configs.\",\n                    \"default\": \"https://raw.githubusercontent.com/nf-core/configs/master\",\n                    \"hidden\": true,\n                    \"help_text\": \"If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.\",\n                    \"fa_icon\": \"fas fa-users-cog\"\n                },\n                \"config_profile_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"Institutional config name.\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-users-cog\"\n                },\n                \"config_profile_description\": {\n                    \"type\": \"string\",\n                    \"description\": \"Institutional config description.\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-users-cog\"\n                },\n                \"config_profile_contact\": {\n                    \"type\": \"string\",\n                    \"description\": \"Institutional config contact information.\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-users-cog\"\n                },\n                \"config_profile_url\": {\n                    \"type\": \"string\",\n                    \"description\": \"Institutional config URL link.\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-users-cog\"\n                }\n            }\n        },\n        \"max_job_request_options\": {\n            \"title\": \"Max job request options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fab fa-acquisitions-incorporated\",\n            \"description\": \"Set the top limit for requested resources for any single job.\",\n            \"help_text\": \"If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\\n\\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.\",\n            \"properties\": {\n                \"max_cpus\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Maximum number of CPUs that can be requested for any single job.\",\n                    \"default\": 16,\n                    \"fa_icon\": \"fas fa-microchip\",\n                    \"hidden\": true,\n                    \"help_text\": \"Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`\"\n                },\n                \"max_memory\": {\n                    \"type\": \"string\",\n                    \"description\": \"Maximum amount of memory that can be requested for any single job.\",\n                    \"default\": \"128.GB\",\n                    \"fa_icon\": \"fas fa-memory\",\n                    \"pattern\": \"^\\\\d+(\\\\.\\\\d+)?\\\\.?\\\\s*(K|M|G|T)?B$\",\n                    \"hidden\": true,\n                    \"help_text\": \"Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`\"\n                },\n                \"max_time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Maximum amount of time that can be requested for any single job.\",\n                    \"default\": \"240.h\",\n                    \"fa_icon\": \"far fa-clock\",\n                    \"pattern\": \"^(\\\\d+\\\\.?\\\\s*(s|m|h|day)\\\\s*)+$\",\n                    \"hidden\": true,\n                    \"help_text\": \"Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`\"\n                }\n            }\n        },\n        \"generic_options\": {\n            \"title\": \"Generic options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-file-import\",\n            \"description\": \"Less common options for the pipeline, typically set in a config file.\",\n            \"help_text\": \"These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\\n\\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.\",\n            \"properties\": {\n                \"help\": {\n                    \"type\": [\"string\", \"boolean\"],\n                    \"description\": \"Display help text.\",\n                    \"fa_icon\": \"fas fa-question-circle\",\n                    \"hidden\": true\n                },\n                \"publish_dir_mode\": {\n                    \"type\": \"string\",\n                    \"default\": \"copy\",\n                    \"description\": \"Method used to save pipeline results to output directory.\",\n                    \"help_text\": \"The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.\",\n                    \"fa_icon\": \"fas fa-copy\",\n                    \"enum\": [\"symlink\", \"rellink\", \"link\", \"copy\", \"copyNoFollow\", \"move\"],\n                    \"hidden\": true\n                },\n                \"email_on_fail\": {\n                    \"type\": \"string\",\n                    \"description\": \"Email address for completion summary, only when pipeline fails.\",\n                    \"fa_icon\": \"fas fa-exclamation-triangle\",\n                    \"pattern\": \"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\",\n                    \"help_text\": \"An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.\",\n                    \"hidden\": true\n                },\n                \"plaintext_email\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Send plain-text email instead of HTML.\",\n                    \"fa_icon\": \"fas fa-remove-format\",\n                    \"hidden\": true\n                },\n                \"max_multiqc_email_size\": {\n                    \"type\": \"string\",\n                    \"description\": \"File size limit when attaching MultiQC reports to summary emails.\",\n                    \"pattern\": \"^\\\\d+(\\\\.\\\\d+)?\\\\.?\\\\s*(K|M|G|T)?B$\",\n                    \"default\": \"25.MB\",\n                    \"fa_icon\": \"fas fa-file-upload\",\n                    \"hidden\": true\n                },\n                \"monochrome_logs\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Do not use coloured log outputs.\",\n                    \"fa_icon\": \"fas fa-palette\",\n                    \"hidden\": true\n                },\n                \"multiqc_config\": {\n                    \"type\": \"string\",\n                    \"description\": \"Custom config file to supply to MultiQC.\",\n                    \"fa_icon\": \"fas fa-cog\",\n                    \"hidden\": true\n                },\n                \"tracedir\": {\n                    \"type\": \"string\",\n                    \"description\": \"Directory to keep pipeline Nextflow logs and reports.\",\n                    \"default\": \"${params.outdir}/pipeline_info\",\n                    \"fa_icon\": \"fas fa-cogs\",\n                    \"hidden\": true\n                },\n                \"validate_params\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Boolean whether to validate parameters against the schema at runtime\",\n                    \"default\": true,\n                    \"fa_icon\": \"fas fa-check-square\",\n                    \"hidden\": true\n                },\n                \"validationShowHiddenParams\": {\n                    \"type\": \"boolean\",\n                    \"fa_icon\": \"far fa-eye-slash\",\n                    \"description\": \"Show all params when using `--help`\",\n                    \"hidden\": true,\n                    \"help_text\": \"By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters.\"\n                },\n                \"enable_conda\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.\",\n                    \"hidden\": true,\n                    \"fa_icon\": \"fas fa-bacon\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        },\n        {\n            \"$ref\": \"#/definitions/reference_genome_options\"\n        },\n        {\n            \"$ref\": \"#/definitions/institutional_config_options\"\n        },\n        {\n            \"$ref\": \"#/definitions/max_job_request_options\"\n        },\n        {\n            \"$ref\": \"#/definitions/generic_options\"\n        }\n    ]\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/","title":"Nextflow schema specification","text":"<p>The Nextflow schema file contains information about pipeline configuration parameters. The file is typically saved in the workflow root directory and called <code>nextflow_schema.json</code>.</p> <p>The Nextflow schema syntax is based on the JSON schema standard, with some key differences. You can find more information about JSON Schema here:</p> <ul> <li>Official docs: https://json-schema.org</li> <li>Excellent \"Understanding JSON Schema\" docs: https://json-schema.org/understanding-json-schema</li> </ul> <p>Warning</p> <p>This file is a reference specification, not documentation about how to write a schema manually.</p> <p>Please see Creating schema files for instructions on how to create these files (and don't be tempted to do it manually in a code editor!)</p> <p>Note</p> <p>The nf-validation plugin, as well as several other interfaces using Nextflow schema, uses a stock JSON schema library for parameter validation. As such, any valid JSON schema should work for validation.</p> <p>However, please note that graphical UIs (docs, launch interfaces) are largely hand-written and may not expect JSON schema usage that is not described here. As such, it's safest to stick to the specification described here and not the core JSON schema spec.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#definitions","title":"Definitions","text":"<p>A slightly strange use of a JSON schema standard that we use for Nextflow schema is <code>definitions</code>.</p> <p>JSON schema can group variables together in an <code>object</code>, but then the validation expects this structure to exist in the data that it is validating. In reality, we have a very long \"flat\" list of parameters, all at the top level of <code>params.foo</code>.</p> <p>In order to give some structure to log outputs, documentation and so on, we group parameters into <code>definitions</code>. Each <code>definition</code> is an object with a title, description and so on. However, as they are under <code>definitions</code> scope they are effectively ignored by the validation and so their nested nature is not a problem. We then bring the contents of each definition object back to the \"flat\" top level for validation using a series of <code>allOf</code> statements at the end of the schema, which reference the specific definition keys.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"type\": \"object\",\n  // Definition groups\n  \"definitions\": { // (1)!\n    \"my_group_of_params\": { // (2)!\n      \"title\": \"A virtual grouping used for docs and pretty-printing\",\n      \"type\": \"object\",\n      \"required\": [\"foo\", \"bar\"], // (3)!\n      \"properties\": { // (4)!\n        \"foo\": { // (5)!\n          \"type\": \"string\"\n        },\n        \"bar\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  // Contents of each definition group brought into main schema for validation\n  \"allOf\": [\n    { \"$ref\": \"#/definitions/my_group_of_params\" } // (6)!\n  ]\n}\n</code></pre> <ol> <li>An arbitrary number of definition groups can go in here - these are ignored by main schema validation.</li> <li>This ID is used later in the <code>allOf</code> block to reference the definition.</li> <li>Note that any required properties need to be listed within this object scope.</li> <li>Actual parameter specifications go in here.</li> <li>Shortened here for the example, see below for full parameter specification.</li> <li>A <code>$ref</code> line like this needs to be added for every definition group</li> </ol> <p>Parameters can be described outside of the <code>definitions</code> scope, in the regular JSON Schema top-level <code>properties</code> scope. However, they will be displayed as ungrouped in tools working off the schema.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#nested-parameters","title":"Nested parameters","text":"<p>Warning (TLDR;)</p> <p>Although the JSON Schema allows schema objects (eg.<code>params.foo.bar = \"baz\"</code>) or arrays, this is not supported by this plugin.</p> <p>Nextflow config allows parameters to be nested as objects, for example:</p> <pre><code>params {\n    foo {\n        bar = \"baz\"\n    }\n}\n</code></pre> <p>or on the CLI:</p> <pre><code>nextflow run &lt;pipeline&gt; --foo.bar \"baz\"\n</code></pre> <p>But - the current implementations of the Nextflow schema do not (for now).</p> <p>This was done as a conscious decision when the code was first written, to try to reduce complexity.</p> <p>It would be great to implement this at some point - there is a GitHub issue to track the feature request here: <code>nf-core/tools#1554</code>. Contributions welcome!</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#required-parameters","title":"Required parameters","text":"<p>Any parameters that must be specified should be set as <code>required</code> in the schema.</p> <p>Tip</p> <p>Make sure you do not set a default value for the parameter, as then it will have a value even if not supplied by the pipeline user and the required property will have no effect.</p> <p>This is not done with a property key like other things described below, but rather by naming the parameter in the <code>required</code> array in the definition object / top-level object.</p> <p>For more information, see the JSON schema documentation.</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"address\": { \"type\": \"string\" },\n    \"telephone\": { \"type\": \"string\" }\n  },\n  \"required\": [\"name\", \"email\"]\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#parameter-name","title":"Parameter name","text":"<p>The <code>properties</code> object key must correspond to the parameter variable name in the Nextflow config.</p> <p>For example, for <code>params.foo</code>, the schema should look like this:</p> <pre><code>// ..\n\"type\": \"object\",\n\"properties\": {\n    \"foo\": {\n        \"type\": \"string\",\n        // ..\n    }\n}\n// ..\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#keys-for-all-parameters","title":"Keys for all parameters","text":""},{"location":"nextflow_schema/nextflow_schema_specification/#type","title":"<code>type</code>","text":"<p>Variable type, taken from the JSON schema keyword vocabulary:</p> <ul> <li><code>string</code></li> <li><code>number</code> (float)</li> <li><code>integer</code></li> <li><code>boolean</code> (true / false)</li> </ul> <p>Validation checks that the supplied parameter matches the expected type, and will fail with an error if not.</p> <p>These JSON schema types are not supported (see Nested paramters):</p> <ul> <li><code>object</code></li> <li><code>array</code></li> <li><code>null</code></li> </ul>"},{"location":"nextflow_schema/nextflow_schema_specification/#default","title":"<code>default</code>","text":"<p>Default value for the parameter.</p> <p>Should match the <code>type</code> and validation patterns set for the parameter in other fields.</p> <p>Tip</p> <p>If no default should be set, completely omit this key from the schema. Do not set it as an empty string, or <code>null</code>.</p> <p>However, parameters with no defaults should be set to <code>null</code> within your Nextflow config file.</p> <p>Note</p> <p>When creating a schema using <code>nf-core schema build</code>, this field will be automatically created based on the default value defined in the pipeline config files.</p> <p>Generally speaking, the two should always be kept in sync to avoid unexpected problems and usage errors. In some rare cases, this may not be possible (for example, a dynamic groovy expression cannot be encoded in JSON), in which case try to specify as \"sensible\" a default within the schema as possible.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#description","title":"<code>description</code>","text":"<p>A short description of what the parameter does, written in markdown. Printed in docs and terminal help text. Should be maximum one short sentence.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#help_text","title":"<code>help_text</code>","text":"<p>Non-standard key</p> <p>A longer text with usage help for the parameter, written in markdown. Can include newlines with multiple paragraphs and more complex markdown structures.</p> <p>Typically hidden by default in documentation and interfaces, unless explicitly clicked / requested.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#errormessage","title":"<code>errorMessage</code>","text":"<p>Non-standard key</p> <p>If validation fails, an error message is printed to the terminal, so that the end user knows what to fix. However, these messages are not always very clear - especially to newcomers.</p> <p>To improve this experience, pipeline developers can set a custom <code>errorMessage</code> for a given parameter in a the schema. If validation fails, this <code>errorMessage</code> is printed instead, and the raw JSON schema validation message goes to the Nextflow debug log output.</p> <p>For example, instead of printing:</p> <pre><code>ERROR ~ * --input: string [samples.yml] does not match pattern ^\\S+\\.csv$ (samples.yml)\n</code></pre> <p>We can set</p> <pre><code>\"input\": {\n  \"type\": \"string\",\n  \"pattern\": \"^\\S+\\.csv$\",\n  \"errorMessage\": \"File name must end in '.csv' cannot contain spaces\"\n}\n</code></pre> <p>and get:</p> <pre><code>ERROR ~ * --input: File name must end in '.csv' cannot contain spaces (samples.yml)\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#enum","title":"<code>enum</code>","text":"<p>An array of enumerated values: the parameter must match one of these values exactly to pass validation.</p> <ul> <li>See the JSON schema docs   for details.</li> <li>Available for strings, numbers and integers.</li> </ul> <pre><code>{\n  \"enum\": [\"red\", \"amber\", \"green\"]\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#fa_icon","title":"<code>fa_icon</code>","text":"<p>Non-standard key</p> <p>A text identifier corresponding to an icon from Font Awesome. Used for easier visual navigation of documentation and pipeline interfaces.</p> <p>Should be the font-awesome class names, for example:</p> <pre><code>\"fa_icon\": \"fas fa-file-csv\"\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#hidden","title":"<code>hidden</code>","text":"<p>Non-standard key</p> <p>A boolean JSON flag that instructs anything using the schema that this is an unimportant parameter.</p> <p>Typically used to keep the pipeline docs / UIs uncluttered with common parameters which are not used by the majority of users. For example, <code>--plaintext_email</code> and <code>--monochrome_logs</code>.</p> <pre><code>\"hidden\": true\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#string-specific-keys","title":"String-specific keys","text":""},{"location":"nextflow_schema/nextflow_schema_specification/#pattern","title":"<code>pattern</code>","text":"<p>Regular expression which the string must match in order to pass validation.</p> <ul> <li>See the JSON schema docs   for details.</li> <li>Use https://regex101.com/ for help with writing regular expressions.</li> </ul> <p>For example, this pattern only validates if the supplied string ends in <code>.fastq</code>, <code>.fq</code>, <code>.fastq.gz</code> or <code>.fq.gz</code>:</p> <pre><code>{\n  \"type\": \"string\",\n  \"pattern\": \".*.f(ast)?q(.gz)?$\"\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#minlength-maxlength","title":"<code>minLength</code>, <code>maxLength</code>","text":"<p>Specify a minimum / maximum string length with <code>minLength</code> and <code>maxLength</code>.</p> <ul> <li>See the JSON schema docs   for details.</li> </ul> <pre><code>{\n  \"type\": \"string\",\n  \"minLength\": 2,\n  \"maxLength\": 3\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#format","title":"<code>format</code>","text":"<p>Formats can be used to give additional validation checks against <code>string</code> values for certain properties.</p> <p>Non-standard key (values)</p> <p>The <code>format</code> key is a standard JSON schema key, however we primarily use it for validating file / directory path operations with non-standard schema values.</p> <p>Note</p> <p>In addition to validating the strings as the provided format type, nf-validation also coerces the parameter variable type. That is: if the schema defines <code>params.input</code> as a <code>file-path</code>, nf-validation will convert the parameter from a <code>String</code> into a <code>Nextflow.File</code>.</p> <p>Example usage is as follows:</p> <pre><code>{\n  \"type\": \"string\",\n  \"format\": \"file-path\"\n}\n</code></pre> <p>The available <code>format</code> types are below:</p> <code>file-path</code> States that the provided value is a file. Does not check its existence, but it does check that the path is not a directory. <code>directory-path</code> States that the provided value is a directory. Does not check its existence, but if it exists, it does check that the path is not a file. <code>path</code> States that the provided value is a path (file or directory). Does not check its existence. <code>file-path-pattern</code> States that the provided value is a globbing pattern that will be used to fetch files. Checks that the pattern is valid and that at least one file is found."},{"location":"nextflow_schema/nextflow_schema_specification/#exists","title":"<code>exists</code>","text":"<p>When a format is specified for a value, you can provide the key <code>exists</code> set to true in order to validate that the provided path exists.</p> <p>Example usage is as follows:</p> <pre><code>{\n  \"type\": \"string\",\n  \"format\": \"file-path\",\n  \"exists\": true\n}\n</code></pre> <p>Note</p> <p>If <code>exists</code> is set to <code>false</code>, this validation is ignored. Does not check if the path exists.</p> <p>Note</p> <p>If the parameter is set to <code>null</code>, <code>false</code> or an empty string, this validation is ignored. It does not check if the path exists.</p> <p>Note</p> <p>If the parameter is an S3 URL path, this validation is ignored. Use <code>--validationS3PathCheck</code> or set <code>params.validationS3PathCheck = true</code> to validate them.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#mimetype","title":"<code>mimetype</code>","text":"<p>MIME type for a file path. Setting this value informs downstream tools about what kind of file is expected.</p> <p>Should only be set when <code>format</code> is <code>file-path</code>.</p> <ul> <li>See a list of common MIME types</li> </ul> <pre><code>{\n  \"type\": \"string\",\n  \"format\": \"file-path\",\n  \"mimetype\": \"text/csv\"\n}\n</code></pre>"},{"location":"nextflow_schema/nextflow_schema_specification/#schema","title":"<code>schema</code>","text":"<p>Path to a JSON schema file used to validate the supplied file.</p> <p>Should only be set when <code>format</code> is <code>file-path</code>.</p> <p>Tip</p> <p>Setting this field is key to working with sample sheet validation and channel generation, as described in the next section of the nf-validation docs.</p> <p>These schema files are typically stored in the pipeline <code>assets</code> directory, but can be anywhere.</p> <pre><code>{\n  \"type\": \"string\",\n  \"format\": \"file-path\",\n  \"schema\": \"assets/foo_schema.json\"\n}\n</code></pre> <p>Note</p> <p>If the parameter is set to <code>null</code>, <code>false</code> or an empty string, this validation is ignored. The file won't be validated.</p>"},{"location":"nextflow_schema/nextflow_schema_specification/#numeric-specific-keys","title":"Numeric-specific keys","text":""},{"location":"nextflow_schema/nextflow_schema_specification/#minimum-maximum","title":"<code>minimum</code>, <code>maximum</code>","text":"<p>Specify a minimum / maximum value for an integer or float number length with <code>minimum</code> and <code>maximum</code>.</p> <ul> <li>See the JSON schema docs   for details.</li> </ul> <p>If x is the value being validated, the following must hold true:</p> <ul> <li><code>x</code> \u2265 <code>minimum</code></li> <li><code>x</code> \u2264 <code>maximum</code></li> </ul> <pre><code>{\n  \"type\": \"number\",\n  \"minimum\": 0,\n  \"maximum\": 100\n}\n</code></pre> <p>Note</p> <p>The JSON schema doc also mention <code>exclusiveMinimum</code>, <code>exclusiveMaximum</code> and <code>multipleOf</code> keys. Because nf-validation uses stock JSON schema validation libraries, these should work for validating keys. However, they are not officially supported within the Nextflow schema ecosystem and so some interfaces may not recognise them.</p>"},{"location":"nextflow_schema/sample_sheet_schema_examples/","title":"Example sample sheet schema","text":""},{"location":"nextflow_schema/sample_sheet_schema_examples/#nf-corernaseq-example","title":"nf-core/rnaseq example","text":"<p>The nf-core/rnaseq pipeline was one of the first to have a sample sheet schema. You can see this, used for validating sample sheets with <code>--input</code> here: <code>assets/schema_input.json</code>.</p> <p>Tip</p> <p>Note the approach used for validating filenames in the <code>fastq_2</code> column. The column is optional, so if a <code>pattern</code> was supplied by itself then validation would fail when no string is supplied.</p> <p>Instead, we say that the string must either match that pattern or it must have a <code>maxLength</code> of <code>0</code> (an empty string).</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://raw.githubusercontent.com/nf-core/rnaseq/master/assets/schema_input.json\",\n  \"title\": \"nf-core/rnaseq pipeline - params.input schema\",\n  \"description\": \"Schema for the file provided with params.input\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"sample\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+$\",\n        \"errorMessage\": \"Sample name must be provided and cannot contain spaces\",\n        \"meta\": [\"my_sample\"]\n      },\n      \"fastq_1\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\",\n        \"format\": \"file-path\",\n        \"errorMessage\": \"FastQ file for reads 1 must be provided, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\"\n      },\n      \"fastq_2\": {\n        \"errorMessage\": \"FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\",\n        \"anyOf\": [\n          {\n            \"type\": \"string\",\n            \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\",\n            \"format\": \"file-path\"\n          },\n          {\n            \"type\": \"string\",\n            \"maxLength\": 0\n          }\n        ]\n      },\n      \"strandedness\": {\n        \"type\": \"string\",\n        \"errorMessage\": \"Strandedness must be provided and be one of 'forward', 'reverse' or 'unstranded'\",\n        \"enum\": [\"forward\", \"reverse\", \"unstranded\"],\n        \"meta\": [\"my_strandedness\"]\n      }\n    },\n    \"required\": [\"sample\", \"fastq_1\", \"strandedness\"]\n  }\n}\n</code></pre>"},{"location":"nextflow_schema/sample_sheet_schema_examples/#nf-validation-test-case","title":"nf-validation test case","text":"<p>You can see a very feature-complete example JSON Schema for a sample sheet schema file below.</p> <p>It is used as a test fixture in the nf-validation package here.</p> <p>Note</p> <p>More examples can be found in the plugin <code>testResources</code> directory.</p> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nextflow-io/nf-validation/master/plugins/nf-validation/src/testResources/schema_input.json\",\n    \"title\": \"Samplesheet validation schema\",\n    \"description\": \"Schema for the samplesheet used in this pipeline\",\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"field_1\": {\n                \"type\": \"string\",\n                \"meta\": [\"string1\",\"string2\"],\n                \"default\": \"value\",\n                \"dependentRequired\": [\"field_2\", \"field_3\"]\n            },\n            \"field_2\": {\n                \"type\": \"integer\",\n                \"meta\": [\"integer1\",\"integer2\"],\n                \"default\": 0\n            },\n            \"field_3\": {\n                \"type\": \"boolean\",\n                \"meta\": [\"boolean1\",\"boolean2\"],\n                \"default\": true\n            },\n            \"field_4\": {\n                \"type\": \"string\"\n            },\n            \"field_5\": {\n                \"type\": \"number\"\n            },\n            \"field_6\": {\n                \"type\": \"boolean\"\n            },\n            \"field_7\": {\n                \"type\": \"string\",\n                \"format\": \"file-path\",\n                \"exists\": true,\n                \"pattern\": \"^.*\\\\.txt$\"\n            },\n            \"field_8\": {\n                \"type\": \"string\",\n                \"format\": \"directory-path\",\n                \"exists\": true\n            },\n            \"field_9\": {\n                \"type\": \"string\",\n                \"format\": \"path\",\n                \"exists\": true\n                },\n            \"field_10\": {\n                \"type\": \"string\",\n                \"unique\": true\n            },\n            \"field_11\": {\n                \"type\": \"integer\",\n                \"unique\": [\"field_10\"]\n            },\n            \"field_12\": {\n                \"type\": \"string\",\n                \"default\": \"itDoesExist\"\n            }\n        },\n        \"required\": [\"field_4\", \"field_6\"]\n    }\n}\n</code></pre>"},{"location":"nextflow_schema/sample_sheet_schema_specification/","title":"Sample sheet schema specification","text":"<p>Sample sheet schema files are used by the nf-validation plugin for validation of sample sheet contents and type conversion / channel generation.</p> <p>The Nextflow schema syntax is based on the JSON schema standard. You can find more information about JSON Schema here:</p> <ul> <li>Official docs: https://json-schema.org</li> <li>Excellent \"Understanding JSON Schema\" docs: https://json-schema.org/understanding-json-schema</li> </ul>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#schema-structure","title":"Schema structure","text":"<p>Validation by the plugin works by parsing the supplied file contents into a groovy object, then passing this to the JSON schema validation library. As such, the structure of the schema must match the structure of the parsed file.</p> <p>Typically, sample sheets are CSV files, with fields represented as columns and samples as rows. TSV and simple unnested YAML files are also supported by the plugin.</p> <p>Warning</p> <p>Nested YAML files can be validated with the <code>validateParameters()</code> function, but cannot be converted to a channel with <code>.fromSamplesheet()</code>.</p> <p>In this case, the parsed object will be an <code>array</code> (see JSON schema docs). The array type is associated with an <code>items</code> key which in our case contains a single <code>object</code>. The object has <code>properties</code>, where the keys must match the headers of the CSV file.</p> <p>So, for CSV sample sheets, the top-level schema should look something like this:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"field_1\": { \"type\": \"string\" },\n      \"field_2\": { \"type\": \"string\" }\n    }\n  }\n}\n</code></pre> <p>If your sample sheet has a different format (for example, a simple YAML file), you will need to build your schema to match the parsed structure.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#properties","title":"Properties","text":"<p>Every array object will contain keys for each field. Each field should be described as an element in the object <code>properties</code> section.</p> <p>The keys of each property must match the header text used in the sample sheet.</p> <p>Fields that are present in the sample sheet, but not in the schema will be ignored and produce a warning.</p> <p>Tip</p> <p>The order of columns in the sample sheet is not relevant, as long as the header text matches.</p> <p>Warning</p> <p>The order of properties in the schema is important. This order defines the order of output channel properties when using the <code>fromSamplesheet</code> channel factory.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#common-keys","title":"Common keys","text":"<p>The majority of schema keys for sample sheet schema validation are identical to the Nextflow schema. For example: <code>type</code>, <code>pattern</code>, <code>format</code>, <code>errorMessage</code>, <code>exists</code> and so on.</p> <p>Please refer to the Nextflow schema specification docs for details.</p> <p>Tip</p> <p>Sample sheets are commonly used to define input file paths. Be sure to set <code>\"type\": \"string\"</code> and <code>\"format\": \"file-path\"</code> for these properties, so that nf-validation correctly returns this sample sheet field as a <code>Nextflow.file</code> object.</p> <p>When using the <code>file-path-pattern</code> format for a globbing pattern, a list will be created with all files found by the globbing pattern. See here for more information.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#sample-sheet-keys","title":"Sample sheet keys","text":"<p>Below are the properties that are specific to sample sheet schema. These exist in addition to those described in the Nextflow schema specification.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#meta","title":"<code>meta</code>","text":"<p>Type: <code>List</code></p> <p>The current field will be considered a meta value when this parameter is present. This parameter should contain a list of the meta fields to assign this value to. The default is no meta for each field.</p> <p>For example:</p> <pre><code>{\n  \"meta\": [\"id\", \"sample\"]\n}\n</code></pre> <p>will convert the <code>field</code> value to a meta value, resulting in the channel <code>[[id:value, sample:value]...]</code> See here for an example in the sample sheet.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#unique","title":"<code>unique</code>","text":"<p>Type: <code>Boolean</code> or <code>List</code></p> <p>Whether or not the field should contain a unique value over the entire sample sheet.</p> <p>Default: <code>false</code></p> <ul> <li>Can be <code>true</code>, in which case the value for this field should be unique for all samples in the sample sheet.</li> <li>Can be supplied with a list of field names, containing other field names that should be unique in combination with the current field.</li> </ul> <p>Example</p> <p>Consider the following example:</p> <pre><code>\"properties\": {\n  \"field1\": { \"unique\": true },\n  \"field2\": { \"unique\": [\"field1\"] }\n}\n</code></pre> <p><code>field1</code> needs to be unique in this example. <code>field2</code> needs to be unique in combination with <code>field1</code>. So for a sample sheet like this:</p> <pre><code>field1,field2\nvalue1,value2\nvalue1,value3\nvalue1,value2\n</code></pre> <p>..both checks will fail.</p> <ul> <li><code>field1</code> isn't unique since <code>value1</code> has been found more than once.</li> <li><code>field2</code> isn't unique in combination with <code>field1</code> because the <code>value1,value2</code> combination has been found more than once.</li> </ul> <p>See <code>schema_input.json#L48-L55</code> for an example in one of the plugin test-fixture sample sheets.</p>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#deprecated","title":"<code>deprecated</code>","text":"<p>Type: <code>Boolean</code></p> <p>A boolean variable stating that the field is deprecated and will be removed in the nearby future. This will throw a warning to the user that the current field is deprecated. The default value is <code>false</code>.</p> <p>Example:</p> <pre><code>\"field\": {\n    \"deprecated\": true\n}\n</code></pre> <p>will show a warning stating that the use of <code>field</code> is deprecated:</p> <pre><code>The 'field' field is deprecated and\nwill no longer be used in the future.\nPlease check the official documentation\nof the pipeline for more information.\n</code></pre>"},{"location":"nextflow_schema/sample_sheet_schema_specification/#dependentrequired","title":"<code>dependentRequired</code>","text":"<p>Type: <code>List</code></p> <ul> <li>See JSON Schema docs</li> </ul> <p>A list containing names of other fields. The validator will check if these fields are filled in and throw an error if they aren't, but only when the field <code>dependentRequired</code> belongs to is filled in.</p> <p>Example</p> <pre><code>\"field1\": {\n    \"dependentRequired\": [\"field2\"]\n},\n\"field2\": {}\n</code></pre> <p>will check if <code>field2</code> is given when <code>field1</code> has a value. So for example:</p> <pre><code>field1,field2\nvalue1,value2\nvalue1,\n,value2\n</code></pre> <ul> <li> The first row will pass the check because both fields are set.</li> <li> The second row will fail because <code>field1</code> is set, but <code>field2</code> isn't and <code>field1</code> is dependent on <code>field2</code>.</li> <li> The third row will pass the check because <code>field1</code> isn't set.</li> </ul> <p>See here for an example in the sample sheet.</p>"},{"location":"parameters/help_text/","title":"Help text","text":""},{"location":"parameters/help_text/#paramshelp","title":"<code>paramsHelp()</code>","text":"<p>This function returns a help message with the command to run a pipeline and the available parameters. Pass it to <code>log.info</code> to print in the terminal.</p> <p>It accepts two arguments:</p> <ol> <li>An example command, typically used to run the pipeline, to be included in the help string</li> <li>The file name of a Nextflow Schema file (Default: <code>nextflow_schema.json</code>)</li> </ol> <p>Note</p> <p><code>paramsHelp()</code> doesn't stop pipeline execution after running. You must add this into your pipeline code if it's the desired functionality.</p> <p>Typical usage:</p> main.nfnextflow.confignextflow_schema.json <pre><code>include { paramsHelp } from 'plugin/nf-validation'\n\nif (params.help) {\n    log.info paramsHelp(\"nextflow run my_pipeline --input input_file.csv\")\n    exit 0\n}\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  outdir = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre> <p>Output:</p> <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [infallible_turing] DSL2 - revision: 8bf4c8d053\n\nTypical pipeline command:\n\n  nextflow run my_pipeline --input input_file.csv\n\nInput/output options\n  --input  [string]  Path to comma-separated file containing information about the samples in the experiment.\n  --outdir [string]  The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\n\n------------------------------------------------------\n</code></pre> <p>Warning</p> <p>We shouldn't be using <code>exit</code> as it kills the Nextflow head job in a way that is difficult to handle by systems that may be running it externally, but at the time of writing there is no good alternative. See <code>nextflow-io/nextflow#3984</code>.</p>"},{"location":"parameters/help_text/#specific-parameter-help","title":"Specific parameter help","text":"<p>By default, when printing the help message only a selection of attributes are printed: type of the variable, accepted options (enums), description and default value.</p> <p>To print the complete information for a single parameter, pass the parameter name to the <code>--help</code> option.</p> <p>For example, with the example above:</p> <pre><code>nextflow run my_pipeline --help outdir\n</code></pre> <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [exotic_rutherford] DSL2 - revision: 8bf4c8d053\n\nTypical pipeline command:\n\n  nextflow run my_pipeline --input input_file.csv\n\n--outdir\n    type       : string\n    format     : directory-path\n    description: The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\n------------------------------------------------------\n</code></pre>"},{"location":"parameters/help_text/#hidden-parameters","title":"Hidden parameters","text":"<p>Params that are set as <code>hidden</code> in the JSON Schema are not shown in the help message. To show these parameters, set the <code>validationShowHiddenParams</code> parameter:</p> <pre><code>nextflow run my_pipeline --help --validationShowHiddenParams\n</code></pre> <p>or specifying it in the configuration file</p> <pre><code>params.validationShowHiddenParams = true\n</code></pre>"},{"location":"parameters/help_text/#coloured-logs","title":"Coloured logs","text":"<p>By default, the help output is coloured using ANSI escape codes.</p> <p>If you prefer, you can disable these by using the argument monochrome_logs, e.g. <code>paramsHelp(monochrome_logs: true)</code>. Alternatively this can be set at a global level via parameter <code>--monochrome_logs</code> or adding <code>params.monochrome_logs = true</code> to a configuration file. <code>--monochromeLogs</code> or <code>params.monochromeLogs</code> is also supported.</p> Default (coloured)Monochrome logs <p></p> <p></p>"},{"location":"parameters/summary_log/","title":"Summary log","text":""},{"location":"parameters/summary_log/#paramssummarylog","title":"<code>paramsSummaryLog()</code>","text":"<p>This function returns a string that can be logged to the terminal, summarizing the parameters provided to the pipeline.</p> <p>Note</p> <p>The summary prioritizes displaying only the parameters that are different the default schema values. Parameters which don't have a default in the JSON Schema and which have a value of <code>null</code>, <code>\"\"</code>, <code>false</code> or <code>'false'</code> won't be returned in the map. This is to streamline the extensive parameter lists often associated with pipelines, and highlight the customized elements. This feature is essential for users to verify their configurations, like checking for typos or confirming proper resolution, without wading through an array of default settings.</p> <p>The function takes two arguments:</p> <ul> <li>The <code>WorkflowMetadata</code> object, <code>workflow</code> (required)</li> <li>File name of a schema file (optional, default: <code>nextflow_schema.json</code>).</li> </ul> <p>Typical usage:</p> main.nfnextflow.confignextflow_schema.json <pre><code>include { paramsSummaryLog } from 'plugin/nf-validation'\n\nlog.info paramsSummaryLog(workflow)\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  outdir = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre> <p>Output:</p> <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [sleepy_goldberg] DSL2 - revision: 7a280216f3\n\nCore Nextflow options\n  runName    : sleepy_goldberg\n  launchDir  : /Users/demo/GitHub/nextflow-io/nf-validation/examples/paramsSummaryLog\n  workDir    : /Users/demo/GitHub/nextflow-io/nf-validation/examples/paramsSummaryLog/work\n  projectDir : /Users/demo/GitHub/nextflow-io/nf-validation/examples/paramsSummaryLog/pipeline\n  userName   : demo\n  profile    : standard\n  configFiles:\n\nInput/output options\n  input      : samplesheet.csv\n  outdir     : results\n\n!! Only displaying parameters that differ from the pipeline defaults !!\n------------------------------------------------------\n</code></pre>"},{"location":"parameters/summary_log/#coloured-logs","title":"Coloured logs","text":"<p>By default, the summary output is coloured using ANSI escape codes.</p> <p>If you prefer, you can disable these by using the argument monochrome_logs, e.g. <code>paramsHelp(monochrome_logs: true)</code>. Alternatively this can be set at a global level via parameter <code>--monochrome_logs</code> or adding <code>params.monochrome_logs = true</code> to a configuration file. Not <code>--monochromeLogs</code> or <code>params.monochromeLogs</code> is also supported.</p> Default (coloured)Monochrome logs <p></p> <p></p>"},{"location":"parameters/summary_log/#paramssummarymap","title":"<code>paramsSummaryMap()</code>","text":"<p>This function returns a Groovy Map summarizing parameters/workflow options used by the pipeline. As above, it only returns the provided parameters that are different to the default values.</p> <p>This function takes the same arguments as <code>paramsSummaryLog()</code>: the <code>workflow</code> object and an optional schema file path.</p> <p>Note</p> <p>Parameters which don't have a default in the JSON Schema and which have a value of <code>null</code>, <code>\"\"</code>, <code>false</code> or <code>'false'</code> won't be returned in the map.</p> <p>Typical usage:</p> main.nfnextflow.confignextflow_schema.json <pre><code>include { paramsSummaryMap } from 'plugin/nf-validation'\n\nprintln paramsSummaryMap(workflow)\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  outdir = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre> <p>Output:</p> <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [happy_lamport] DSL2 - revision: c45338cd96\n\n[Core Nextflow options:[runName:happy_lamport, launchDir:/Users/ewels/GitHub/nextflow-io/nf-validation/examples/paramsSummaryMap, workDir:/Users/ewels/GitHub/nextflow-io/nf-validation/examples/paramsSummaryMap/work, projectDir:/Users/ewels/GitHub/nextflow-io/nf-validation/examples/paramsSummaryMap/pipeline, userName:ewels, profile:standard, configFiles:], Input/output options:[input:samplesheet.csv, outdir:results]]\n</code></pre>"},{"location":"parameters/validation/","title":"Validation of pipeline parameters","text":""},{"location":"parameters/validation/#validateparameters","title":"<code>validateParameters()</code>","text":"<p>This function takes all pipeline parameters and checks that they adhere to the specifications defined in the JSON Schema.</p> <ul> <li>It does not return anything, but logs errors or warnings indicating the parameters that failed to the command line.</li> <li>If any parameter validation has failed, it throws a <code>SchemaValidationException</code> exception to stop the pipeline.</li> <li>If any parameters in the schema reference a sample sheet schema with <code>schema</code>, that file is loaded and validated.</li> </ul> <p>The function takes two optional arguments:</p> <ul> <li>The filename of a JSON Schema file (optional, default: <code>nextflow_schema.json</code>). File paths should be relative to the root of the pipeline directory.</li> <li>A boolean to disable coloured outputs (optional, default: <code>false</code>). The output is coloured using ANSI escape codes by default.</li> </ul> <p>You can provide the parameters as follows:</p> <pre><code>validateParameters(parameters_schema: 'custom_nextflow_parameters.json', monochrome_logs: true)\n</code></pre> <p>Monochrome logs can also be set globally providing the parameter <code>--monochrome_logs</code> or adding <code>params.monochrome_logs = true</code> to a configuration file. The form <code>--monochromeLogs</code> is also supported.</p> <p>Tip</p> <p>As much of the Nextflow ecosystem assumes the <code>nextflow_schema.json</code> filename, it's recommended to stick with the default, if possible.</p> <p>See the Schema specification for information about what validation data you can encode within the schema for each parameter.</p>"},{"location":"parameters/validation/#example","title":"Example","text":"<p>The example below has a deliberate typo in <code>params.input</code> (<code>.txt</code> instead of <code>.csv</code>). The validation function catches this for two reasons:</p> <ul> <li>The filename doesn't match the expected pattern (here checking file extensions)</li> <li>The supplied file doesn't exist</li> </ul> <p>The function causes Nextflow to exit immediately with an error.</p>  Outputmain.nfnextflow.confignextflow_schema.json <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [amazing_crick] DSL2 - revision: 53bd9eac20\n\nERROR ~ ERROR: Validation of pipeline parameters failed!\n\n -- Check '.nextflow.log' file for details\nThe following invalid input values have been detected:\n\n* --input: string [samplesheet.txt] does not match pattern ^\\S+\\.(csv|tsv|yaml)$ (samplesheet.txt)\n* --input: the file 'samplesheet.txt' does not exist (samplesheet.txt)\n</code></pre> <pre><code>include { validateParameters } from 'plugin/nf-validation'\n\nvalidateParameters()\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.txt\"\n  outdir = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre>"},{"location":"parameters/validation/#failing-for-unrecognized-parameters","title":"Failing for unrecognized parameters","text":"<p>When parameters which are not specified in the JSON Schema are provided, the parameter validation function returns a <code>WARNING</code>. This is because user-specific institutional configuration profiles may make use of params that are unknown to the pipeline.</p> <p>The down-side of this is that warnings about typos in parameters can go unnoticed.</p> <p>To force the pipeline execution fail with an error instead, you can provide the <code>validationFailUnrecognisedParams</code> parameter:</p> <pre><code>nextflow run my_pipeline --validationFailUnrecognisedParams\n</code></pre> <p>or specify it in the configuration file</p> <pre><code>params.validationFailUnrecognisedParams = true\n</code></pre>  Default Fail unrecognised params Outputnextflow.configmain.nf <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [jovial_linnaeus] DSL2 - revision: 53bd9eac20\n\nWARN: The following invalid input values have been detected:\n\n* --foo: bar\n\nHello World!\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  outdir = \"results\"\n  foo = \"bar\"\n}\n</code></pre> <pre><code>include { validateParameters } from 'plugin/nf-validation'\n\nvalidateParameters()\n\nprintln \"Hello World!\"\n</code></pre> Outputnextflow.configmain.nf <pre><code>N E X T F L O W  ~  version 23.04.1\nLaunching `pipeline/main.nf` [pedantic_descartes] DSL2 - revision: 53bd9eac20\n\nERROR ~ ERROR: Validation of pipeline parameters failed!\n\n -- Check '.nextflow.log' file for details\nThe following invalid input values have been detected:\n\n* --foo: bar\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  validationFailUnrecognisedParams = true\n  input = \"samplesheet.csv\"\n  outdir = \"results\"\n  foo = \"bar\"\n}\n</code></pre> <pre><code>include { validateParameters } from 'plugin/nf-validation'\n\nvalidateParameters()\n\nprintln \"Hello World!\"\n</code></pre>"},{"location":"parameters/validation/#ignoring-unrecognized-parameters","title":"Ignoring unrecognized parameters","text":"<p>Sometimes, a parameter that you want to set may not be described in the pipeline schema for a good reason. Maybe it's something you're using in your Nextflow configuration setup for your compute environment, or it's a complex parameter that cannot be handled in the schema, such as nested parameters.</p> <p>In these cases, to avoid getting warnings when that unrecognised parameter is set, you can use <code>--validationSchemaIgnoreParams</code> / <code>params.validationSchemaIgnoreParams</code>.</p> <p>This should be a comma-separated list of strings that correspond to parameter names.</p>"},{"location":"parameters/validation/#variable-type-checking","title":"Variable type checking","text":"<p>By default, <code>validateParameters()</code> is strict about expecting parameters to adhere to their expected type. If the schema says that <code>params.foo</code> should be an <code>integer</code> and the user sets <code>params.foo = \"12\"</code> (a string with a number), it will fail.</p> <p>If this causes problems, the user can run validation in \"lenient mode\", whereby the JSON Schema validation tries to cast parameters to their correct type. For example, providing an integer as a string will no longer fail validation.</p> <p>Note</p> <p>The validation does not affect the parameter variable types in your pipeline. It attempts to cast a temporary copy of the params only, during the validation step.</p> <p>You can find more information about how this works in the JSON schema validation library docs.</p> <p>To enable lenient validation mode, set <code>params.validationLenientMode</code>:</p> <pre><code>nextflow run my_pipeline --validationLenientMode\n</code></pre> <p>or specify it in the configuration file</p> <pre><code>params.validationLenientMode = true\n</code></pre>"},{"location":"samplesheets/examples/","title":"Sample sheet channel manipulation examples","text":""},{"location":"samplesheets/examples/#introduction","title":"Introduction","text":"<p>Understanding channel structure and manipulation is critical for getting the most out of Nextflow. nf-validation helps initialise your channels from the text inputs to get you started, but further work might be required to fit your exact use case. In this page we run through some common cases for transforming the output of <code>.fromSamplesheet</code>.</p>"},{"location":"samplesheets/examples/#glossary","title":"Glossary","text":"<ul> <li>A channel is the Nextflow object, referenced in the code</li> <li>An item is each thing passing through the channel, equivalent to one row in the samplesheet</li> <li>An element is each thing in the item, e.g., the meta value, fastq_1 etc. It may be a file or value</li> </ul>"},{"location":"samplesheets/examples/#default-mode","title":"Default mode","text":"<p>Each item in the channel emitted by <code>.fromSamplesheet()</code> is a flat tuple, corresponding with each row of the samplesheet. Each item will be composed of a meta value (if present) and any additional elements from columns in the samplesheet, e.g.:</p> <pre><code>sample,fastq_1,fastq_2,bed\nsample1,fastq1.R1.fq.gz,fastq1.R2.fq.gz,sample1.bed\nsample2,fastq2.R1.fq.gz,fastq2.R2.fq.gz,\n</code></pre> <p>Might create a channel where each element consists of 4 items, a map value followed by three files:</p> <pre><code>// Columns:\n[ val([ sample: sample ]), file(fastq1), file(fastq2), file(bed) ]\n\n// Resulting in:\n[ [ id: \"sample\" ], fastq1.R1.fq.gz, fastq1.R2.fq.gz, sample1.bed]\n[ [ id: \"sample2\" ], fastq2.R1.fq.gz, fastq2.R2.fq.gz, [] ] // A missing value from the samplesheet is an empty list\n</code></pre> <p>This channel can be used as input of a process where the input declaration is:</p> <pre><code>tuple val(meta), path(fastq_1), path(fastq_2), path(bed)\n</code></pre> <p>It may be necessary to manipulate this channel to fit your process inputs. For more documentation, check out the Nextflow operator docs, however here are some common use cases with <code>.fromSamplesheet()</code>.</p>"},{"location":"samplesheets/examples/#using-a-samplesheet-with-no-headers","title":"Using a samplesheet with no headers","text":"<p>Sometimes you only have one possible input in the pipeline samplesheet. In this case it doesn't make sense to have a header in the samplesheet. This can be done by creating a samplesheet with an empty string as input key:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"description\": \"Schema for the file provided with params.input\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n</code></pre> <p>When using samplesheets like this CSV file:</p> <pre><code>test_1\ntest_2\n</code></pre> <p>or this YAML file:</p> <pre><code>- test_1\n- test_2\n</code></pre> <p>The output of <code>.fromSamplesheet()</code> will look like this:</p> <pre><code>[test_1]\n[test_2]\n</code></pre>"},{"location":"samplesheets/examples/#changing-the-structure-of-channel-items","title":"Changing the structure of channel items","text":"<p>Each item in the channel will be a flat tuple, but some processes will use multiple files as a list in their input channel, this is common in nf-core modules. For example, consider the following input declaration in a process, where FASTQ could be &gt; 1 file:</p> <pre><code>process ZCAT_FASTQS {\n    input:\n        tuple val(meta), path(fastq)\n\n    \"\"\"\n    zcat $fastq\n    \"\"\"\n}\n</code></pre> <p>The output of <code>.fromSamplesheet()</code> can be used by default with a process with the following input declaration:</p> <pre><code>val(meta), path(fastq_1), path(fastq_2)\n</code></pre> <p>To manipulate each item within a channel, you should use the Nextflow <code>.map()</code> operator. This will apply a function to each element of the channel in turn. Here, we convert the flat tuple into a tuple composed of a meta and a list of FASTQ files:</p> <pre><code>Channel.fromSamplesheet(\"input\")\n    .map { meta, fastq_1, fastq_2 -&gt; tuple(meta, [ fastq_1, fastq_2 ]) }\n    .set { input }\n\ninput.view() // Channel has 2 elements: meta, fastqs\n</code></pre> <p>This is now compatible with the process defined above and will not raise a warning about input cardinality:</p> <pre><code>ZCAT_FASTQS(input)\n</code></pre>"},{"location":"samplesheets/examples/#removing-elements-in-channel-items","title":"Removing elements in channel items","text":"<p>For example, to remove the BED file from the channel created above, we could not return it from the map. Note the absence of the <code>bed</code> item in the return of the closure below:</p> <pre><code>Channel.fromSamplesheet(\"input\")\n    .map { meta, fastq_1, fastq_2, bed -&gt; tuple(meta, fastq_1, fastq_2) }\n    .set { input }\n\ninput.view() // Channel has 3 elements: meta, fastq_1, fastq_2\n</code></pre> <p>In this way you can drop items from a channel.</p>"},{"location":"samplesheets/examples/#separating-channel-items","title":"Separating channel items","text":"<p>We could perform this twice to create one channel containing the FASTQs and one containing the BED files, however Nextflow has a native operator to separate channels called <code>.multiMap()</code>. Here, we separate the FASTQs and BEDs into two separate channels using <code>multiMap</code>. Note, the channels are both contained in <code>input</code> and accessed as an attribute using dot notation:</p> <pre><code>Channel.fromSamplesheet(\"input\")\n    .multiMap { meta, fastq_1, fastq_2, bed -&gt;\n        fastq: tuple(meta, fastq_1, fastq_2)\n        bed:   tuple(meta, bed)\n    }\n    .set { input }\n</code></pre> <p>The channel has two attributes, <code>fastq</code> and <code>bed</code>, which can be accessed separately.</p> <pre><code>input.fastq.view() // Channel has 3 elements: meta, fastq_1, fastq_2\ninput.bed.view()   // Channel has 2 elements: meta, bed\n</code></pre> <p>Importantly, <code>multiMap</code> applies to every item in the channel and returns an item to both channels for every input, i.e. <code>input</code>, <code>input.fastq</code> and <code>input.bed</code> all contain the same number of items, however each item will be different.</p>"},{"location":"samplesheets/examples/#separate-items-based-on-a-condition","title":"Separate items based on a condition","text":"<p>You can use the <code>.branch()</code> operator to separate the channel entries based on a condition. This is especially useful when you can get multiple types of input data.</p> <p>This example shows a channel which can have entries for WES or WGS data. WES data includes a BED file denoting the target regions, but WGS data does not. These analysis are different so we want to separate the WES and WGS entries from each other. We can separate the two using <code>.branch</code> based on the presence of the BED file:</p> <pre><code>// Channel with four elements - see docs for examples\nparams.input = \"samplesheet.csv\"\n\nChannel.fromSamplesheet(\"input\")\n    .branch { meta, fastq_1, fastq_2, bed -&gt;\n        // If BED does not exist\n        WGS: !bed\n            return [meta, fastq_1, fastq_2]\n        // If BED exists\n        WES: bed\n            // The original channel structure will be used when no return statement is used.\n    }\n    .set { input }\n\ninput.WGS.view() // Channel has 3 elements: meta, fastq_1, fastq_2\ninput.WES.view() // Channel has 4 elements: meta, fastq_1, fastq_2, bed\n</code></pre> <p>Unlike <code>multiMap</code>, the outputs of <code>.branch()</code>, the resulting channels will contain a different number of items.</p>"},{"location":"samplesheets/examples/#combining-a-channel","title":"Combining a channel","text":"<p>After splitting the channel, it may be necessary to rejoin the channel. There are many ways to join a channel, but here we will demonstrate the simplest which uses the Nextflow join operator to rejoin any of the channels from above based on the first element in each item, the <code>meta</code> value.</p> <pre><code>input.fastq.view() // Channel has 3 elements: meta, fastq_1, fastq_2\ninput.bed.view()   // Channel has 2 elements: meta, bed\n\ninput.fastq\n    .join( input.bed )\n    .set { input_joined }\n\ninput_joined.view() // Channel has 4 elements: meta, fastq_1, fastq_2, bed\n</code></pre>"},{"location":"samplesheets/examples/#count-items-with-a-common-value","title":"Count items with a common value","text":"<p>This example is based on this code from Marcel Ribeiro-Dantas.</p> <p>It's useful to determine the count of channel entries with similar values when you want to merge them later on (to prevent pipeline bottlenecks with <code>.groupTuple()</code>).</p> <p>This example contains a channel where multiple samples can be in the same family. Later on in the pipeline we want to merge the analyzed files so one file gets created for each family. The result will be a channel with an extra meta field containing the count of channel entries with the same family name.</p> <pre><code>// channel created by fromSamplesheet() previous to modification:\n// [[id:example1, family:family1], example1.txt]\n// [[id:example2, family:family1], example2.txt]\n// [[id:example3, family:family2], example3.txt]\n\nparams.input = \"samplesheet.csv\"\n\nChannel.fromSamplesheet(\"input\")\n    .tap { ch_raw }                       // Create a copy of the original channel\n    .map { meta, txt -&gt; [ meta.family ] } // Isolate the value to count on\n    .reduce([:]) { counts, family -&gt;      // Creates a map like this: [family1:2, family2:1]\n        counts[family] = (counts[family] ?: 0) + 1\n        counts\n    }\n    .combine(ch_raw)                     // Add the count map to the original channel\n    .map { counts, meta, txt -&gt;          // Add the counts of the current family to the meta\n        new_meta = meta + [count:counts[meta.family]]\n        [ new_meta, txt ]\n    }\n    .set { input }\n\ninput.view()\n// [[id:example1, family:family1, count:2], example1.txt]\n// [[id:example2, family:family1, count:2], example2.txt]\n// [[id:example3, family:family2, count:1], example3.txt]\n</code></pre>"},{"location":"samplesheets/fromSamplesheet/","title":"Create a channel from a sample sheet","text":""},{"location":"samplesheets/fromSamplesheet/#fromsamplesheet","title":"<code>fromSamplesheet</code>","text":"<p>This function validates and converts a samplesheet to a ready-to-use Nextflow channel. This is done using information encoded within a sample sheet schema (see the docs).</p> <p>The function has one mandatory argument: the name of the parameter which specifies the input samplesheet. The parameter specified must have the format <code>file-path</code> and include additional field <code>schema</code>:</p> <pre><code>{\n  \"type\": \"string\",\n  \"format\": \"file-path\",\n  \"schema\": \"assets/foo_schema.json\"\n}\n</code></pre> <p>The path specified in the <code>schema</code> key determines the JSON used for validation of the samplesheet.</p> <p>When using the <code>.fromSamplesheet</code> channel factory, some additional optional arguments can be used:</p> <ul> <li><code>parameters_schema</code>: File name for the pipeline parameters schema. (Default: <code>nextflow_schema.json</code>)</li> <li><code>skip_duplicate_check</code>: Skip the checking for duplicates. Can also be skipped with the <code>--validationSkipDuplicateCheck</code> parameter. (Default: <code>false</code>)</li> </ul> <pre><code>Channel.fromSamplesheet('input')\n</code></pre> <pre><code>Channel.fromSamplesheet(\n  'input',\n  parameters_schema: 'custom_nextflow_schema.json',\n  skip_duplicate_check: false\n)\n</code></pre>"},{"location":"samplesheets/fromSamplesheet/#basic-example","title":"Basic example","text":"<p>In this example, we create a simple channel from a CSV samplesheet.</p> <pre><code>N E X T F L O W  ~  version 23.04.0\nLaunching `pipeline/main.nf` [distraught_marconi] DSL2 - revision: 74f697a0d9\n[mysample1, input1_R1.fq.gz, input1_R2.fq.gz, forward]\n[mysample2, input2_R1.fq.gz, input2_R2.fq.gz, forward]\n</code></pre> main.nfsamplesheet.csvnextflow.confignextflow_schema.jsonassets/schema_input.json <pre><code>include { fromSamplesheet } from 'plugin/nf-validation'\n\nch_input = Channel.fromSamplesheet(\"input\")\n\nch_input.view()\n</code></pre> <pre><code>sample,fastq_1,fastq_2,strandedness\nmysample1,input1_R1.fq.gz,input1_R2.fq.gz,forward\nmysample2,input2_R1.fq.gz,input2_R2.fq.gz,forward\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  output = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://raw.githubusercontent.com/nf-validation/example/master/assets/schema_input.json\",\n  \"title\": \"nf-validation example - params.input schema\",\n  \"description\": \"Schema for the file provided with params.input\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"sample\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+$\",\n        \"errorMessage\": \"Sample name must be provided and cannot contain spaces\"\n      },\n      \"fastq_1\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\",\n        \"errorMessage\": \"FastQ file for reads 1 must be provided, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\"\n      },\n      \"fastq_2\": {\n        \"errorMessage\": \"FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\",\n        \"anyOf\": [\n          {\n            \"type\": \"string\",\n            \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\"\n          },\n          {\n            \"type\": \"string\",\n            \"maxLength\": 0\n          }\n        ]\n      },\n      \"strandedness\": {\n        \"type\": \"string\",\n        \"errorMessage\": \"Strandedness must be provided and be one of 'forward', 'reverse' or 'unstranded'\",\n        \"enum\": [\"forward\", \"reverse\", \"unstranded\"]\n      }\n    },\n    \"required\": [\"sample\", \"fastq_1\", \"strandedness\"]\n  }\n}\n</code></pre>"},{"location":"samplesheets/fromSamplesheet/#order-of-fields","title":"Order of fields","text":"<p>This example demonstrates that the order of columns in the sample sheet file has no effect.</p> <p>Danger</p> <p>It is the order of fields in the sample sheet JSON schema which defines the order of items in the channel returned by <code>fromSamplesheet()</code>, not the order of fields in the CSV file.</p> <pre><code>N E X T F L O W  ~  version 23.04.0\nLaunching `pipeline/main.nf` [elated_kowalevski] DSL2 - revision: 74f697a0d9\n[forward, mysample1, input1_R2.fq.gz, input1_R1.fq.gz]\n[forward, mysample2, input2_R2.fq.gz, input2_R1.fq.gz]\n</code></pre> samplesheet.csvassets/schema_input.jsonmain.nfnextflow.confignextflow_schema.json <pre><code>sample,fastq_1,fastq_2,strandedness\nmysample1,input1_R1.fq.gz,input1_R2.fq.gz,forward\nmysample2,input2_R1.fq.gz,input2_R2.fq.gz,forward\n</code></pre> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://raw.githubusercontent.com/nf-validation/example/master/assets/schema_input.json\",\n  \"title\": \"nf-validation example - params.input schema\",\n  \"description\": \"Schema for the file provided with params.input\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"strandedness\": {\n        \"type\": \"string\",\n        \"errorMessage\": \"Strandedness must be provided and be one of 'forward', 'reverse' or 'unstranded'\",\n        \"enum\": [\"forward\", \"reverse\", \"unstranded\"]\n      },\n      \"sample\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+$\",\n        \"errorMessage\": \"Sample name must be provided and cannot contain spaces\"\n      },\n      \"fastq_2\": {\n        \"errorMessage\": \"FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\",\n        \"anyOf\": [\n          {\n            \"type\": \"string\",\n            \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\"\n          },\n          {\n            \"type\": \"string\",\n            \"maxLength\": 0\n          }\n        ]\n      },\n      \"fastq_1\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\",\n        \"errorMessage\": \"FastQ file for reads 1 must be provided, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\"\n      }\n    },\n    \"required\": [\"sample\", \"fastq_1\", \"strandedness\"]\n  }\n}\n</code></pre> <pre><code>include { fromSamplesheet } from 'plugin/nf-validation'\n\nch_input = Channel.fromSamplesheet(\"input\")\n\nch_input.view()\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  output = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre>"},{"location":"samplesheets/fromSamplesheet/#channel-with-meta-map","title":"Channel with meta map","text":"<p>In this example, we use the schema to mark two columns as meta fields. This returns a channel with a meta map.</p> <pre><code>N E X T F L O W  ~  version 23.04.0\nLaunching `pipeline/main.nf` [romantic_kare] DSL2 - revision: 74f697a0d9\n[[my_sample_id:mysample1, my_strandedness:forward], input1_R1.fq.gz, input1_R2.fq.gz]\n[[my_sample_id:mysample2, my_strandedness:forward], input2_R1.fq.gz, input2_R2.fq.gz]\n</code></pre> assets/schema_input.jsonmain.nfsamplesheet.csvnextflow.confignextflow_schema.json <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://raw.githubusercontent.com/nf-validation/example/master/assets/schema_input.json\",\n  \"title\": \"nf-validation example - params.input schema\",\n  \"description\": \"Schema for the file provided with params.input\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"sample\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+$\",\n        \"errorMessage\": \"Sample name must be provided and cannot contain spaces\",\n        \"meta\": [\"my_sample_id\"]\n      },\n      \"fastq_1\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\",\n        \"errorMessage\": \"FastQ file for reads 1 must be provided, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\"\n      },\n      \"fastq_2\": {\n        \"errorMessage\": \"FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'\",\n        \"anyOf\": [\n          {\n            \"type\": \"string\",\n            \"pattern\": \"^\\\\S+\\\\.f(ast)?q\\\\.gz$\"\n          },\n          {\n            \"type\": \"string\",\n            \"maxLength\": 0\n          }\n        ]\n      },\n      \"strandedness\": {\n        \"type\": \"string\",\n        \"errorMessage\": \"Strandedness must be provided and be one of 'forward', 'reverse' or 'unstranded'\",\n        \"enum\": [\"forward\", \"reverse\", \"unstranded\"],\n        \"meta\": [\"my_strandedness\"]\n      }\n    },\n    \"required\": [\"sample\", \"fastq_1\", \"strandedness\"]\n  }\n}\n</code></pre> <pre><code>include { fromSamplesheet } from 'plugin/nf-validation'\n\nch_input = Channel.fromSamplesheet(\"input\")\n\nch_input.view()\n</code></pre> <pre><code>sample,fastq_1,fastq_2,strandedness\nmysample1,input1_R1.fq.gz,input1_R2.fq.gz,forward\nmysample2,input2_R1.fq.gz,input2_R2.fq.gz,forward\n</code></pre> <pre><code>plugins {\n  id 'nf-validation@0.2.1'\n}\n\nparams {\n  input = \"samplesheet.csv\"\n  output = \"results\"\n}\n</code></pre> <pre><code>{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"https://raw.githubusercontent.com/nf-core/testpipeline/master/nextflow_schema.json\",\n    \"title\": \"nf-core/testpipeline pipeline parameters\",\n    \"description\": \"this is a test\",\n    \"type\": \"object\",\n    \"definitions\": {\n        \"input_output_options\": {\n            \"title\": \"Input/output options\",\n            \"type\": \"object\",\n            \"fa_icon\": \"fas fa-terminal\",\n            \"description\": \"Define where the pipeline should find input data and save output data.\",\n            \"required\": [\"input\", \"outdir\"],\n            \"properties\": {\n                \"input\": {\n                    \"type\": \"string\",\n                    \"format\": \"file-path\",\n                    \"mimetype\": \"text/csv\",\n                    \"schema\": \"assets/schema_input.json\",\n                    \"pattern\": \"^\\\\S+\\\\.(csv|tsv|yaml)$\",\n                    \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\",\n                    \"help_text\": \"You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/testpipeline/usage#samplesheet-input).\",\n                    \"fa_icon\": \"fas fa-file-csv\"\n                },\n                \"outdir\": {\n                    \"type\": \"string\",\n                    \"format\": \"directory-path\",\n                    \"description\": \"The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.\",\n                    \"fa_icon\": \"fas fa-folder-open\"\n                }\n            }\n        }\n    },\n    \"allOf\": [\n        {\n            \"$ref\": \"#/definitions/input_output_options\"\n        }\n    ]\n}\n</code></pre>"},{"location":"samplesheets/validate_sample_sheet/","title":"Validate a sample sheet file contents","text":"<p>When a parameter provides the <code>schema</code> field, the <code>validateParameters()</code> function will automatically parse and validate the provided file contents using this JSON schema. It can validate CSV, TSV and simple YAML files.</p> <p>The path of the schema file must be relative to the root of the pipeline directory. See an example in the <code>input</code> field from the example schema.json.</p> <pre><code>{\n  \"properties\": {\n    \"input\": {\n      \"type\": \"string\",\n      \"format\": \"file-path\",\n      \"pattern\": \"^\\\\S+\\\\.csv$\",\n      \"schema\": \"src/testResources/samplesheet_schema.json\",\n      \"description\": \"Path to comma-separated file containing information about the samples in the experiment.\"\n    }\n  }\n}\n</code></pre> <p>For more information about the samplesheet JSON schema refer to samplesheet docs.</p>"}]}